---
export interface Props {
  images: string[];
  title: string;
}

const { images, title } = Astro.props;
---

{/* Carousel de Flowbite */}
<div
  id={`carousel-${title.replace(/\s+/g, "-").toLowerCase()}`}
  class="relative w-full mb-4"
  data-carousel="slide"
>
  {/* Contenedor del carousel */}
  <div class="relative h-56 overflow-hidden rounded-lg md:h-64 lg:h-80">
    {
      images.map((image, index) => (
        <div
          class="hidden duration-700 ease-in-out cursor-zoom-in"
          data-carousel-item={index === 0 ? "active" : ""}
          onclick={`openModal('${image}', '${title} - Imagen ${index + 1}')`}
        >
          <img
            src={image}
            class="absolute block w-full h-full object-cover -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"
            alt={`${title} - Imagen ${index + 1}`}
          />
        </div>
      ))
    }
  </div>

  {/* Botones de navegación */}
  <button
    type="button"
    class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-prev
  >
    <span
      class="inline-flex items-center justify-center size-7 lg:size-10 rounded-full 
      bg-black/30 group-hover:bg-black/50"
    >
      <svg
        class="size-3 lg:size-4 text-white rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 1 1 5l4 4"></path>
      </svg>
      <span class="sr-only">Anterior</span>
    </span>
  </button>
  <button
    type="button"
    class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-next
  >
    <span
      class="inline-flex items-center justify-center size-7 lg:size-10 rounded-full 
      bg-black/30 group-hover:bg-black/50"
    >
      <svg
        class="size-3 lg:size-4 text-white rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M1 9l4-4-4-4"></path>
      </svg>
      <span class="sr-only">Siguiente</span>
    </span>
  </button>

  {/* Modal para imagen expandida */}
  <div
    id="image-modal"
    tabindex="-1"
    class="fixed justify-center items-center top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-full max-h-full bg-black/70"
  >
    <div class="relative w-full max-w-4xl max-h-full mx-auto">
      {/* Contenido del modal */}
      <div class="relative bg-transparent rounded-lg">
        <button
          type="button"
          class="bg-black/30 hover:bg-black/50
          absolute top-5 right-5 lg:top-6 lg:right-6 rounded-full size-5 lg:size-8 ml-auto 
          inline-flex justify-center items-center cursor-pointer"
          onclick="closeModal()"
        >
          <svg
            class="size-2 lg:size-3 text-white"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 14"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
          </svg>
          <span class="sr-only">Cerrar modal</span>
        </button>
        <div class="p-4 flex flex-col items-center">
          <img
            id="modal-image"
            class="max-w-full max-h-[80vh] object-contain"
            src=""
            alt=""
          />
          <p id="modal-caption" class="mt-2 text-white text-center"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript para el modal de imagen expandida -->
<script is:inline>
  // Función para abrir el modal con la imagen seleccionada
  function openModal(imageSrc, caption) {
    const modal = document.getElementById("image-modal");
    const modalImg = document.getElementById("modal-image");
    const modalCaption = document.getElementById("modal-caption");

    modal.classList.remove("hidden");
    modal.classList.add("flex");
    modal.setAttribute("aria-hidden", "false");
    modalImg.src = imageSrc;
    modalCaption.textContent = caption;
    document.body.classList.add("overflow-hidden");
  }

  // Función para cerrar el modal
  function closeModal() {
    const modal = document.getElementById("image-modal");

    modal.classList.add("hidden");
    modal.classList.remove("flex");
    modal.setAttribute("aria-hidden", "true");
    document.body.classList.remove("overflow-hidden");
  }

  // Cerrar al hacer clic fuera de la imagen
  document
    .getElementById("image-modal")
    .addEventListener("click", function (e) {
      if (e.target === this) {
        closeModal();
      }
    });

  // Cerrar con tecla ESC
  document.addEventListener("keydown", function (e) {
    const modal = document.getElementById("image-modal");
    if (e.key === "Escape" && !modal.classList.contains("hidden")) {
      closeModal();
    }
  });

  // Inicialización del carousel (la que ya teníamos)
  document.addEventListener("DOMContentLoaded", function () {
    document
      .querySelectorAll('[data-carousel="slide"]')
      .forEach((carouselElement) => {
        new Carousel(carouselElement, {
          interval: 4000,
        });
      });
  });
</script>

<!-- Estilos para transición del modal -->
<style>
  #image-modal {
    transition: opacity 0.3s ease;
  }

  #modal-image {
    transition: transform 0.3s ease;
  }

  #image-modal:not(.hidden) #modal-image {
    animation: zoomIn 0.3s ease;
  }

  @keyframes zoomIn {
    from {
      transform: scale(0.9);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>
